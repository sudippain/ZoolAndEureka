package com.example.TestProject.controller;

import java.util.List;
import java.util.Optional;

import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.TestProject.model.User;
import com.example.TestProject.repo.UserRepo;
import com.example.TestProject.services.UserServiceImpl;

@Controller
@RequestMapping("/base")
public class BaseController {

	@Autowired
	UserServiceImpl userserviceImplobj;
	
	@Autowired
	UserRepo userRepo;
	
	@PostMapping("/registration")
	public ResponseEntity<?> createUser(@RequestBody User user) {
		if(userserviceImplobj.saveUser(user)) {
		return new ResponseEntity<User>(user,HttpStatus.CREATED);
		}else {
			return new ResponseEntity<String>("Not Created",HttpStatus.BAD_REQUEST);
		}
		
	}
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<String> deleteUser(@PathVariable String id) {
		if(userserviceImplobj.deleteById(id)) {
			return new ResponseEntity<String>("User Delete",HttpStatus.OK);
		}
		else {
			return new ResponseEntity<String>("Not Deleted",HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping("/getUser/{id}")
	public ResponseEntity<Optional<User>> getUser(@PathVariable String id){
		
		
			return new ResponseEntity<Optional<User>>(userserviceImplobj.getUserById(id),HttpStatus.OK);
		
		
	}
	
	@GetMapping("/allUser")
	public ResponseEntity<List<User>> getAllUser(){
		return new ResponseEntity<List<User>>( userRepo.findAll(),HttpStatus.OK);
	}
	
	@PutMapping("/updateUser/{id}")
	public ResponseEntity<User> updateUser(@RequestBody User user,@PathVariable String id){
		String company=null;
		try {
		 company=user.getUserCompany();
		}
		catch (NullPointerException e) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		if(userserviceImplobj.updateUser(company,id)) {
		return new ResponseEntity<>(HttpStatus.ACCEPTED);
		}
		else {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping("/getData/requestParam")
	public ResponseEntity<String> getData(@RequestParam(name = "id") Optional<String> userName){
		System.out.println(userName);
		return new ResponseEntity<Optional>(userName,HttpStatus.OK);
	}
}
